package 패턴매칭과PJT;

public class Solution {
	/*
	 * KMP 알고리즘
	 * - 불일치가 발생한 텍스트 문자열의 앞부분에 어떤 문자가 있는지를 미리 알고 있으므로,
	 *   불일치가 발생한 앞 부분에 대하여 다시 비교하지 않고 매칭을 수행
	 * - 시간복잡도: O(N+M) // N: 문자열의 길이, M: 패턴길이
	 * 
	 * Rabin-Karp
	 * - 문자열 검색을 위해 해시값 함수를 이용
	 * - 패턴 내의 문자들을 일일이 비교하는 대신에 패턴의 해시 값과 본문 안에 있는
	 *   하위 문자열의 해시 값만을 비교
	 * - 최악의 시간 복잡도는 O(MN)이지만 평균적으로는 선형에 가까운 빠른 속도를 가지는 알고리즘
	 * 
	 * Boyer-Moore
	 * - 오른쪽에서 왼쪽으로 비교
	 * - 대부분의 상용 소프트웨어에서 채택하고 있는 알고리즘
	 * - 보이어-무어 알고리즘은 패턴의 오른쪽 끝에 있는 문자가 불일치하고,
	 *   이 문자가 패턴 내에 존재하지 않는 경우, 이동거리는 무려 패턴의 길이만큼이 된다.
	 * 
	 * */
}