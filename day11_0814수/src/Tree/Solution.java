package Tree;

public class Solution {
	/*
	 * 트리의 개념
	 * - 비선형 구조
	 *   - 선형 : 순서를 표현
	 *   - 트리 : 계층관계, 상하관계
	 * - 원소들 간에 1:N관계를 가지는 자료구조
	 * - 원소들 간에 계층관계를 가지는 계층형 자료구조
	 * - 상위 원소에서 하위 원소로 내려가면서 확장되는 트리모양의 구조
	 * - 한 개 이상의 노드로 이루어진 유한 집합이며 다음 조건을 만족한다.
	 *   - 노드 중 최상위 노드를 루트라 한다.
	 *   - 나머지 노드들은 n개의 분리 집합 T1, ..., Tn으로 분리될 수 있다.
	 * - 연결리스트도 트리의 일종. 편향트리
	 * 
	 * 차수(degree)
	 * - 노드의 차수 : 노드에 연결된 자식 노드의 수.
	 * - 트리의 차수 : 트리에 있는 노드의 차수 중에서 가장 큰 값
	 * - 단말 노드(리프 노드) : 차수가 0인 노드. 즉, 자식 노드가 없는 노드
	 * 
	 * 높이
	 * - 노드의 높이 : 루트에서 노드에 이르는 간선의 수. 노드의 레벨
	 * - 트리의 높이 : 트리에 있는 노드의 높이 중에서 가장 큰 값. 최대 레벨
	 * 
	 * 이진트리
	 * - 모든 노드들이 최대 2개까지의 서브 트리를 갖는 특별한 형태의 트리
	 * - 레벨 i에서의 노드의 최대 개수는 2^i개
	 * - 높이가 h인 이진트리가 가질 수 있는 노드의 최소 개수는 h+1개가 되며,
	 *   최대 개수는 2^(h+1)-1개가 된다.
	 * - 포화 이진 트리 : 모든 레벨에 노드가 포화상태로 차 있는 이진 트리
	 * - 완전 이진 트리 : 높이가 h이고 노드 수가 n개일 때, 포화 이진 트리의
	 *   노드 번호 1번부터 n번까지 빈 자리가 없는 이진 트리
	 * - 편향 이진 트리 : 높이 h에 대한 최소 개수의 노드를 가지면서 한쪽 방향의
	 *   자식 노드만을 가진 이진 트리
	 *   
	 * 이진 트리의 표현 - 배열
	 * - 노드 번호의 성질
	 *   - 노드 번호가 i인 노드의 부모 노드 번호 : i/2
	 *   - 노드 번호가 i인 노드의 왼쪽 자식 노드 번호 : i*2
	 *   - 노드 번호가 i인 노드의 오른쪽 자식 노드 번호 : i*2 + 1
	 *   - 레벨 n의 노드번호 시작 번호 : 2^n
	 *   
	 * 배열을 이용한 이진 트리의 표현의 단점
	 * - 편향 이진 트리의 경우에 사용하지 않는 배열 원소에 대한 메모리 공간 낭비 발생
	 * - 트리의 중간에 새로운 노드를 삽입하거나 기존의 노드를 삭제할 겨우 배열의 크기 
	 *   변경 어려워 비효율적
	 * - 배열 삽입, 삭제가 자주 일어나지 않고, 완전이진트리(포화이진트리)인 경우엔
	 *   탐색 효율적
	 *   
	 * 트리의 표현 - 연결리스트
	 * 
	 * 이진트리 - 순회(traversal)
	 * - 순회란 트리의 각 노드를 중복되지 않게 전부 방문하는 것을 말하는데 트리는
	 *   비선형구조이기 때문에 선형구조에서와 같이 선후 연결 관계를 알 수 없다.
	 * - 3가지의 기본적인 순회방법
	 *   - 전위순회(preorder traversal) : VLR
	 *     - 부모 노드 방문 후, 자식 노드를 좌, 우 순서로 방문한다.
	 *   - 중위순회(inorder traversal) : LVR
	 *     - 왼쪽 자식 노드, 부모 노드, 오른쪽 자식 노드 순
	 *   - 후위순회(postorder traversal) : LRV
	 *     - 자식 노드를 좌우 순서로 방문한 후, 부모 노드로 방문한다.
	 *
	 * 전위 순회(preorder traversal)
	 *   1) 현재 노드 n을 방문하여 처리한다 -> V
	 *   2) 현재 노드 n의 왼쪽 서브 트리로 이동한다 -> L
	 *   3) 현재 노드 n의 오른쪽 서브 트리로 이동한다. -> R
	 *   
	 * */
}