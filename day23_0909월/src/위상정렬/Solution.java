package 위상정렬;

public class Solution {
/*
 * 위상 정렬이란(Topological Sorting)
 * - 순서가 있는 작업을 차례로 진행해야 할 때 순서를 결정해주기 위해 사용하는 알고리즘
 * - '사이클 없는 방향 그래프(DAG)'의 모든 노드를 주어진 방향성에 어긋나지 않게 순서를 나열하는 것
 * ex) 대학 선수과목, 공장의 작업 순서, 요리 순서 등..
 * 
 * - 진입 차수: 특정 노드로 들어오는 간선의 개수 -> 선행조건의 유무 
 * - 진출 차수: 특정 노드에서 나가는 간선의 개수
 * 
 * 위상 정렬 방법 (Queue 사용)
 * 1. 진입 차수가 0인 모든 노드를 Queue에 삽입
 * 2. Queue가 공백상태가 될 때까지 반복 수행
 * 	1) Queue에서 원소를 꺼내 해당 노드에서 나가는 간선을 그래프에서 제거한다.(연결된 노드의 진입 차수를 감소시킨다.)
 *  2) 새롭게 진입 차수가 0이 된 노드를 Queue 삽입한다.
 * 
 * 위상 정렬 방법 (Stack 사용)
 * 1. 진입 차수가 0인 모든 노드에서 DFS 탐색 수행
 * 2. DFS 수행
 *   1) 해당 노드를 방문 표시
 *   2) 인접하면서 방문하지 않은 노드가 있다면 DFS 재귀 호출
 *   3) 함수 리턴하기 전 Stack에 현재 노드 저장
 * 3. Stack이 공백상태가 될 때까지 pop
 * 
 * 
 * */
}